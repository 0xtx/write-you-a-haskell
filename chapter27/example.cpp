// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/LLVMContext.h>
#include <llvm/Module.h>
#include <llvm/DerivedTypes.h>
#include <llvm/Constants.h>
#include <llvm/GlobalVariable.h>
#include <llvm/Function.h>
#include <llvm/CallingConv.h>
#include <llvm/BasicBlock.h>
#include <llvm/Instructions.h>
#include <llvm/InlineAsm.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("example.ll", getGlobalContext());
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 
 // Function Declarations
 
 Function* func_test1 = mod->getFunction("test1");
 if (!func_test1) {
 func_test1 = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"test1", mod); 
 func_test1->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_test1_PAL;
 func_test1->setAttributes(func_test1_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: test1 (func_test1)
 {
  Function::arg_iterator args = func_test1->arg_begin();
  Value* int32_x = args++;
  int32_x->setName("x");
  Value* int32_y = args++;
  int32_y->setName("y");
  Value* int32_z = args++;
  int32_z->setName("z");
  
  BasicBlock* label_1 = BasicBlock::Create(mod->getContext(), "",func_test1,0);
  
  // Block  (label_1)
  BinaryOperator* int32_a = BinaryOperator::Create(Instruction::And, int32_z, int32_x, "a", label_1);
  BinaryOperator* int32_b = BinaryOperator::Create(Instruction::And, int32_z, int32_y, "b", label_1);
  BinaryOperator* int32_c = BinaryOperator::Create(Instruction::Xor, int32_a, int32_b, "c", label_1);
  ReturnInst::Create(mod->getContext(), int32_c, label_1);
  
 }
 
 return mod;
}
